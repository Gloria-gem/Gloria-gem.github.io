<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Java基本知识]]></title>
      <url>/2024/01/04/Java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<hr>
<hr>
<h2 id="第八章-多线程"><a href="#第八章-多线程" class="headerlink" title="第八章 多线程"></a>第八章 多线程</h2><h3 id="1-线程创建两种方法"><a href="#1-线程创建两种方法" class="headerlink" title="1.线程创建两种方法"></a>1.线程创建两种方法</h3><ul>
<li><p>extends Thread</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明线程时声明类即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread1</span> <span class="keyword">extends</span>   <span class="title class_">Thread</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行了run方法&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread1</span> <span class="variable">testThread1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TestThread1</span>();</span><br><span class="line">        <span class="comment">//调用线程，用的是start方法</span></span><br><span class="line">        testThread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


</li>
<li><p>implements Runnable</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">////声明线程时声明类即可要声明Thread（代理模式）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestThread2</span> <span class="keyword">implements</span>  <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;执行了run方法&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">TestThread2</span> <span class="variable">testThread2</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">TestThread2</span>();</span><br><span class="line">        <span class="comment">//调用线程，用的是start方法</span></span><br><span class="line">       <span class="comment">//new 一个Thread方法去进行线程模式，在这里用了代理模式</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(testThread2,<span class="string">&#x27;name&#x27;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>Thread.currentThread.getName（）可获得当前线程名字</p>
</blockquote>
<h3 id="2-线程间的同步机制"><a href="#2-线程间的同步机制" class="headerlink" title="2.线程间的同步机制"></a>2.线程间的同步机制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- sleep</span><br><span class="line">- isAlive</span><br><span class="line">- interrupt</span><br><span class="line">- isInterrupted</span><br><span class="line">- <span class="keyword">synchronized</span></span><br><span class="line">- <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- 在run中</span><br><span class="line">    <span class="keyword">synchronized</span>(对象)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">- wait</span><br><span class="line">- notify</span><br></pre></td></tr></table></figure>

<h2 id="第十章-输入输出流与文件处理"><a href="#第十章-输入输出流与文件处理" class="headerlink" title="第十章 输入输出流与文件处理"></a>第十章 输入输出流与文件处理</h2><h3 id="输入输出流（引入import-java-io-）"><a href="#输入输出流（引入import-java-io-）" class="headerlink" title="输入输出流（引入import java.io.*）"></a>输入输出流（引入import java.io.*）</h3><h4 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataInputStream</span> <span class="variable">d</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DataInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="comment">//读 ,有返回值</span></span><br><span class="line">- readInt()</span><br><span class="line">- readDouble()</span><br><span class="line">- readChar()</span><br><span class="line">    </span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DataOutputStream</span> <span class="variable">b</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="comment">//写 //可用for循环写入数组</span></span><br><span class="line">- writeInt(<span class="type">int</span> a)</span><br><span class="line">- writeDouble(<span class="type">double</span> a) </span><br><span class="line">- writeChar(<span class="type">char</span> a)</span><br><span class="line">- writeChars(String a)</span><br></pre></td></tr></table></figure>



<h4 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedReader</span> <span class="variable">din</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="comment">//or BufferedReader din = new BufferedReader(new InputStreamReader(&quot;1.txt&quot;));</span></span><br><span class="line"><span class="comment">//读</span></span><br><span class="line">- readline();<span class="comment">//一读读一行</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">dout</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriterr</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;1.txt&quot;</span>));</span><br><span class="line"><span class="comment">//写</span></span><br><span class="line">- write(<span class="string">&quot;可写任意类型&quot;</span>)</span><br><span class="line">- newLine() <span class="comment">//换行</span></span><br></pre></td></tr></table></figure>



<h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;.&quot;</span>);<span class="comment">//当前目录</span></span><br><span class="line">File[] files =dir.listFiles();<span class="comment">//返回当前文件下所有目录</span></span><br><span class="line">- isFile() <span class="comment">//是否是文件</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>文件过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InnerFilter filter</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="第六章-图形用户界面（GUI）"><a href="#第六章-图形用户界面（GUI）" class="headerlink" title="第六章 图形用户界面（GUI）"></a>第六章 图形用户界面（GUI）</h2><ol>
<li>导入包 &gt; import  java.awt.*</li>
<li>导入包&gt;import javax.swing.*</li>
</ol>
<h3 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h3><img src="/2024/01/04/Java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.jpg" alt="1" style="zoom:80%;">



<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//基本操作</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">//1.继承JFrame</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;标题&quot;</span>);<span class="comment">//设置标题</span></span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">200</span>);<span class="comment">//设置位置与大小</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);<span class="comment">//可关闭</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//可看见</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h3><blockquote>
<p>布局分为三种布局分别是流布局管理器FlowLayout,边布局管理器 BorderLayout和网格布局管理器GridLayout</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为面板或容器设置布局时，一个关键的命令是 </span></span><br><span class="line">- setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>())</span><br><span class="line">- setLayout(<span class="keyword">new</span> <span class="title class_">GridLayout</span>(<span class="number">3</span>,<span class="number">1</span>))</span><br><span class="line">- setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>()) <span class="comment">// 用BorderLayout布局设置方位时 p1.add(button2,BorderLayout.EAST);</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>当然也可以直接设置方位如 <strong>JButton a &#x3D;new  JButton(“as”);   a.setBounds(24,95,156,46);</strong></p>
</blockquote>
<h3 id="基本组件详细解释"><a href="#基本组件详细解释" class="headerlink" title="基本组件详细解释"></a>基本组件详细解释</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所有的组件要想加到容器中要用到这个命令</span></span><br><span class="line"><span class="built_in">this</span>.getContentPane().add(p1)</span><br><span class="line">  <span class="comment">//组件——&gt;面板————&gt;容器</span></span><br></pre></td></tr></table></figure>

<ol>
<li><strong>JDialog</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入java.awt包，这个包提供了GUI和Web应用程序的许多基础类和接口  </span></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入java.awt.event包的ActionEvent和ActionListener，用于处理按钮点击等事件  </span></span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个名为Example6_11的公共类  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Example6_11</span> &#123;</span><br><span class="line">    <span class="comment">// main方法是Java程序的入口点  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">// 创建DialogDemo对象，打开对话框示例  </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">DialogDemo</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个名为DialogDemo的类，这个类继承自JFrame类，JFrame是一个顶层窗口容器  </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DialogDemo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> &#123;</span><br><span class="line">    <span class="comment">// 创建私有按钮对象btn和自定义对话框对象dialog  </span></span><br><span class="line">    <span class="keyword">private</span> JButton btn;</span><br><span class="line">    <span class="keyword">private</span> MyJDialog dialog;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// DialogDemo构造函数  </span></span><br><span class="line">    DialogDemo() &#123;</span><br><span class="line">        <span class="comment">// 调用父类构造函数，设置窗口标题为&quot;对话框示例&quot;  </span></span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;对话框示例&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置窗口的位置和大小  </span></span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        <span class="comment">// 设置窗口默认的关闭操作为EXIT_ON_CLOSE，即关闭窗口时结束程序  </span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个按钮，并设置按钮上的文字为&quot;打开对话框&quot;  </span></span><br><span class="line">        btn = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;打开对话框&quot;</span>);</span><br><span class="line">        <span class="comment">// 将按钮添加到窗口的内容面板上  </span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(btn);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个自定义对话框  </span></span><br><span class="line">        dialog = <span class="keyword">new</span> <span class="title class_">MyJDialog</span>(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">// 为按钮添加监听器，当按钮被点击时，执行监听器中的actionPerformed方法  </span></span><br><span class="line">        btn.addActionListener(<span class="keyword">new</span> <span class="title class_">ActionListener</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">                <span class="comment">// 如果事件源是btn按钮，则使对话框可见  </span></span><br><span class="line">                <span class="keyword">if</span> (e.getSource() == btn)</span><br><span class="line">                    dialog.setVisible(<span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 设置窗口为可见状态  </span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个名为MyJDialog的类，这个类继承自JDialog类  </span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MyJDialog</span> <span class="keyword">extends</span> <span class="title class_">JDialog</span> <span class="comment">//继承是关键&#123;</span></span><br><span class="line">        <span class="comment">// MyJDialog构造函数，需要一个JFrame对象作为参数  </span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyJDialog</span><span class="params">(JFrame jframe)</span> &#123;</span><br><span class="line">            <span class="comment">// 调用父类构造函数，初始化对话框，设置对话框的父窗口，标题和模态  </span></span><br><span class="line">            <span class="built_in">super</span>(jframe, <span class="string">&quot;我的对话框&quot;</span>);</span><br><span class="line">            <span class="comment">// 设置对话框的位置和大小  </span></span><br><span class="line">            <span class="built_in">this</span>.setBounds(jframe.getX() + jframe.getWidth() + <span class="number">10</span>, jframe.getY(), <span class="number">150</span>, <span class="number">150</span>);</span><br><span class="line">            <span class="comment">// 设置对话框默认的关闭操作为HIDE_ON_CLOSE，即关闭对话框时隐藏对话框，不结束程序  </span></span><br><span class="line">            <span class="built_in">this</span>.setDefaultCloseOperation(HIDE_ON_CLOSE);</span><br><span class="line">            <span class="comment">// 设置对话框内容面板的布局为流布局  </span></span><br><span class="line">            <span class="built_in">this</span>.getContentPane().setLayout(<span class="keyword">new</span> <span class="title class_">FlowLayout</span>());</span><br><span class="line">            <span class="comment">// 向对话框的内容面板上添加两个按钮，并设置按钮上的文字为&quot;学习&quot;和&quot;休息&quot;  </span></span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;学习&quot;</span>));</span><br><span class="line">            <span class="built_in">this</span>.getContentPane().add(<span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;休息&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><strong>JRadioButton</strong></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//在处理单选按钮时，需要只有一个选项，这时，就要把一组多选框放到一组ButtonGroup中</span><br><span class="line"></span><br><span class="line">ButtonGroup bg =new ButtonGroup();</span><br><span class="line">bg.add(&quot;单选按钮1&quot;);</span><br><span class="line">bg.add(&quot;单选按钮2&quot;);</span><br><span class="line">p1.add(bg);//将bg加到面板中</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>Jlist JComboBox</strong></li>
</ol>
<p>两者添加的可以是一个数组</p>
<p>4.<strong>JMenuBar</strong> </p>
<h3 id="事件处理机制"><a href="#事件处理机制" class="headerlink" title="事件处理机制"></a>事件处理机制</h3><p>我认为可能会考的两个事件处理</p>
<ul>
<li>ActionListener   —-&gt;  JButton —-&gt; actionPerformed(ActionEvent e) 单机操作</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//操作</span></span><br><span class="line"><span class="type">JBUtton</span>  <span class="variable">b1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;sad&quot;</span>);</span><br><span class="line">b1.addActionListener(<span class="built_in">this</span>);</span><br><span class="line"><span class="comment">//1.继承JFrame 2.继承ActionListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">ActionListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> JButton b1;</span><br><span class="line">    <span class="keyword">private</span> JPanel p1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;标题&quot;</span>);<span class="comment">//设置标题</span></span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">200</span>);<span class="comment">//设置位置与大小</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);<span class="comment">//可关闭</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//可看见</span></span><br><span class="line">        <span class="built_in">this</span>.getContentPane().setLayout(<span class="keyword">new</span> <span class="title class_">BorderLayout</span>());</span><br><span class="line">         p1 = <span class="keyword">new</span> <span class="title class_">JPanel</span>();</span><br><span class="line">        <span class="built_in">this</span>.getContentPane().add(p1,BorderLayout.CENTER);</span><br><span class="line">        b1 = <span class="keyword">new</span> <span class="title class_">JButton</span>(<span class="string">&quot;asd&quot;</span>);</span><br><span class="line">        b1.setBackground(Color.BLUE);</span><br><span class="line">        p1.add(b1);</span><br><span class="line">        b1.addActionListener(<span class="built_in">this</span>);<span class="comment">//此处为关键</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">actionPerformed</span><span class="params">(ActionEvent e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(e.getSource()==b1)&#123;<span class="comment">//判断点击的按钮</span></span><br><span class="line">            p1.setBackground(Color.red);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>



<ul>
<li>MouseListener</li>
</ul>
<ol>
<li>事件适配器写法</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> henu;</span><br><span class="line"><span class="comment">//基本操作</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.继承JFrame</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span></span><br><span class="line">&#123;</span><br><span class="line">    Container c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;标题&quot;</span>);<span class="comment">//设置标题</span></span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">200</span>);<span class="comment">//设置位置与大小</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);<span class="comment">//可关闭</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//可看见</span></span><br><span class="line">        c = <span class="built_in">this</span>.getContentPane();</span><br><span class="line">       <span class="built_in">this</span>.getContentPane().addMouseListener(<span class="keyword">new</span> <span class="title class_">MouseAdapter</span>() &#123;<span class="comment">//匿名类</span></span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">              c.setBackground(Color.BLUE);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<ol start="2">
<li>事件监听器接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> henu;</span><br><span class="line"><span class="comment">//基本操作</span></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.继承JFrame</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> <span class="keyword">extends</span> <span class="title class_">JFrame</span> <span class="keyword">implements</span> <span class="title class_">MouseListener</span><span class="comment">// 继承MouseListener类</span></span><br><span class="line">&#123;</span><br><span class="line">    Container c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Demo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="string">&quot;标题&quot;</span>);<span class="comment">//设置标题</span></span><br><span class="line">        <span class="built_in">this</span>.setBounds(<span class="number">100</span>,<span class="number">300</span>,<span class="number">200</span>,<span class="number">200</span>);<span class="comment">//设置位置与大小</span></span><br><span class="line">        <span class="built_in">this</span>.setDefaultCloseOperation(EXIT_ON_CLOSE);<span class="comment">//可关闭</span></span><br><span class="line">        <span class="built_in">this</span>.setVisible(<span class="literal">true</span>);<span class="comment">//可看见</span></span><br><span class="line">        c = <span class="built_in">this</span>.getContentPane();</span><br><span class="line">       <span class="built_in">this</span>.getContentPane().addMouseListener(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Demo</span> <span class="variable">demo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Demo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseClicked</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line">        c.setBackground(Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mousePressed</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseReleased</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseEntered</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mouseExited</span><span class="params">(MouseEvent e)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h2 id="第五章-Java基本类"><a href="#第五章-Java基本类" class="headerlink" title="第五章 Java基本类"></a>第五章 Java基本类</h2><h3 id="java-lang语言包"><a href="#java-lang语言包" class="headerlink" title="java.lang语言包"></a>java.lang语言包</h3><p><img src="/2024/01/04/Java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/2c13961f42591da7ec39996dfc886bc3.png" alt="img"></p>
<h4 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h4><p>最基本的字符串声明不用多说，在这里只说明其常用的几个方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- s.length <span class="comment">// 字符串长度获取</span></span><br><span class="line">- s.equals <span class="comment">// 字符串比较</span></span><br><span class="line">- s.equalsIgnoreCase <span class="comment">// 忽略大小写的字符串比较</span></span><br><span class="line">-  字符串的检索</span><br><span class="line">    - <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span> <span class="comment">// 返回index上的字符</span></span><br><span class="line">    - <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(<span class="type">int</span> ch)</span> <span class="comment">//返回ch在字符串中出现的第一个位置</span></span><br><span class="line">    - <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(<span class="type">int</span> ch)</span> <span class="comment">//返回ch在字符串中出现的最后一个位置</span></span><br><span class="line">    - <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(String str)</span> <span class="comment">//返回str在字符串中出现的第一个位置</span></span><br><span class="line">    - <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(String str)</span> <span class="comment">//返回str在字符串中出现的最后一个位置</span></span><br><span class="line">    - <span class="keyword">void</span> <span class="title function_">getChars</span><span class="params">(<span class="type">int</span> srcbegin,<span class="type">int</span> end,<span class="type">char</span> buf[], <span class="type">int</span> destbegin)</span><span class="comment">//将该字符串从srcbegin到end-1放到buf[] 的起始位置为destbegin中 </span></span><br><span class="line">- 修改字符串</span><br><span class="line">    - String <span class="title function_">concat</span><span class="params">(Strign str)</span> <span class="comment">//连接字符串可用+代替</span></span><br><span class="line">    - String <span class="title function_">trim</span><span class="params">()</span> <span class="comment">//去掉前后空格</span></span><br><span class="line">    - String <span class="title function_">replace</span><span class="params">(<span class="type">char</span> oldChar,<span class="type">char</span> newChar)</span> <span class="comment">//替换字符串</span></span><br><span class="line">    - String <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex)</span> <span class="comment">//获取从beginIndex到结尾的子串</span></span><br><span class="line">    - String  <span class="title function_">substring</span><span class="params">(<span class="type">int</span> beginIndex,<span class="type">int</span> end)</span><span class="comment">//获取从beginIndex到end-1的子串</span></span><br></pre></td></tr></table></figure>

<h3 id="Java-util"><a href="#Java-util" class="headerlink" title="Java.util"></a>Java.util</h3><h4 id="集合API中的List"><a href="#集合API中的List" class="headerlink" title="集合API中的List"></a>集合API中的List</h4><p><img src="/2024/01/04/Java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/1688578-20190610231249524-1787557538.png" alt="img"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line">List&lt;String&gt; x =<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">	x.add(<span class="string">&quot;sa&quot;</span>);</span><br><span class="line">	x.add(<span class="string">&quot;sda&quot;</span>);</span><br><span class="line">	x.add(<span class="string">&quot;a&quot;</span>);</span><br></pre></td></tr></table></figure>



<p>List的输出</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.for循环输出</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span> ;i&lt;x.size();i++) &#123;</span><br><span class="line">		System.out.println(x.get(i));</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//2.ListIterator 迭代器输出</span></span><br><span class="line">ListIterator&lt;String&gt; le = x.listIterator();</span><br><span class="line">	<span class="keyword">while</span>(le.hasNext()) &#123;</span><br><span class="line">		 <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span>le.next();</span><br><span class="line">		 System.out.println(s);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//用ListIterator而不用Iterator是ListIterator可更改</span></span><br><span class="line">    ListIterator&lt;String&gt; le = x.listIterator();</span><br><span class="line">	<span class="keyword">while</span>(le.hasNext()) &#123;</span><br><span class="line">		 <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span>le.next();</span><br><span class="line">         <span class="keyword">if</span>(s.equals(<span class="string">&quot;a&quot;</span>))&#123;</span><br><span class="line">             le.add(<span class="string">&quot;sdad&quot;</span>);<span class="comment">//迭代器加</span></span><br><span class="line">         &#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//3.增强for循环输出</span></span><br><span class="line">     <span class="keyword">for</span>(String s: x)  </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">   </span><br></pre></td></tr></table></figure>

<h4 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Random</span> <span class="variable">ran</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">ran.nextInt(<span class="number">100</span>)<span class="comment">//生成100以内的随机数</span></span><br></pre></td></tr></table></figure>

<h4 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();<span class="comment">// 实例化一个Date类，用于获取当前系统时间</span></span><br><span class="line">System.out.println(date);<span class="comment">// 输出时间，Thu May 23 14:36:10 JST 2019</span></span><br><span class="line"></span><br><span class="line"><span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd E HH-mm-ss&quot;</span>);<span class="comment">//在java.text 包</span></span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(date);<span class="comment">// 按照指定格式转为字符串</span></span><br><span class="line">System.out.println(str);<span class="comment">// 输出转换后的时间，2019-05-23 星期四 14-36-10</span></span><br></pre></td></tr></table></figure>



<h2 id="第三章-Java面向对象"><a href="#第三章-Java面向对象" class="headerlink" title="第三章 Java面向对象"></a>第三章 Java面向对象</h2><blockquote>
<p>我所认为的难点</p>
<ul>
<li>static  变成了类方法或类变量，类方法中不能有super与this</li>
<li>super</li>
<li>类的继承，接口与多态</li>
</ul>
</blockquote>
<h4 id="类的基本结构"><a href="#类的基本结构" class="headerlink" title="类的基本结构"></a><strong>类的基本结构</strong></h4><p><img src="/2024/01/04/Java%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/image-20240104125222546.png" alt="image-20240104125222546"></p>
<h4 id="类的继承-extends"><a href="#类的继承-extends" class="headerlink" title="类的继承(extends)"></a>类的继承(extends)</h4><blockquote>
<p>区分子类方法中重名的三种变量:</p>
<p>1.局部变量: 直接写成员变量名</p>
<p>2.本类的成员变量: this.成员变量名</p>
<p>3.父类的成员变量: super.成员变量名</p>
</blockquote>
<ul>
<li><p>能继承的情形</p>
<ul>
<li>子类能继承父类的非私有成员变量（实例与类变量）</li>
<li>子类能继承除了构造方法以外的所有成员方法</li>
</ul>
</li>
<li><p>其他特性</p>
<ul>
<li>子类不能删除父类成员</li>
<li>子类可以增加成员变量与方法</li>
<li>在子类的构造方法中可用super()初始化父类构造方法</li>
<li>super.成员方法   super.成员变量</li>
</ul>
</li>
<li><p>上转型   </p>
<ul>
<li>&#x3D;&#x3D;即 People p1 &#x3D;new Student(); People为父类，Student为子类&#x3D;&#x3D;</li>
</ul>
</li>
<li><p>隐藏，覆盖，动态绑定</p>
<ul>
<li>对于子类重定义父类成员的情况<ul>
<li>对于成员变量与静态方法，子类的隐藏父类的。上转型引用的是父类的。</li>
<li>对于实例成员方法，子类覆盖父类的。上转型引用的是子类的，这种方式成为动态绑定。</li>
<li>若子类实例成员方法未覆盖父类，调用父类方法时，方法中用的是父类的成员变量，甚至是私有变量。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="类的接口"><a href="#类的接口" class="headerlink" title="类的接口"></a>类的接口</h4><blockquote>
<p>满足类的接口中不能有具体的实例，所有方法，子类都需实现</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[photo]]></title>
      <url>/2023/12/28/photo/</url>
      <content type="html"><![CDATA[<h1 id="photo"><a href="#photo" class="headerlink" title="photo"></a>photo</h1><h2 id="photo1"><a href="#photo1" class="headerlink" title="photo1"></a>photo1</h2><p><img src="/2023/12/28/photo/1.jpg" alt="image"></p>
<span id="more"></span>

<h2 id="王俊豪学web"><a href="#王俊豪学web" class="headerlink" title="王俊豪学web"></a>王俊豪学web</h2><p><img src="/2023/12/28/photo/image-20231228115934040.png" alt="image-20231228115934040"></p>
]]></content>
      
        
        <tags>
            
            <tag> photo试验 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
